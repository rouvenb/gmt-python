{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First Steps\n",
    "\n",
    "This is an example of what you can already with GMT/Python. \n",
    "We'll mostly reproduce some examples from the [GMT Tutorial](http://gmt.soest.hawaii.edu/doc/latest/GMT_Tutorial.html#session-one).\n",
    "\n",
    "## Loading the library\n",
    "\n",
    "The GMT modules are available as functions and classes in the `gmt` Python package. \n",
    "See the [API Reference](api.html) for a list of all available functions and classes.\n",
    "\n",
    "First, import the `gmt` package:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import gmt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## A first map\n",
    "\n",
    "All figure generation in GMT/Python is handled by the [gmt.Figure](api/gmt.Figure.html) class. \n",
    "It has methods to add layers to your figure (the GMT `ps*` modules)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We start a new figure by creating an instance of `gmt.Figure`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig = gmt.Figure()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Add elements to the figure using its methods. For example, lets add the coastlines of Central America using a 6 inch wide Mercator map."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig.pscoast(R='-90/-70/0/20', J='M6i', G='chocolate', \n",
    "            B='afg')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most methods of `gmt.Figure` accept the same arguments as the GMT command-line programs. A general rule is that you can pass any argument as a string value. If an argument has no options (like `-P`), use a `True` value for it instead.\n",
    "\n",
    "<div class=\"alert alert-success\">\n",
    "Experienced GMT users will notice that there is no output redirecting to a PostScript file. \n",
    "This is all thanks to the new GMT [modern execution mode](http://gmt.soest.hawaii.edu/projects/gmt/wiki/Modernization) that will be part of the future 6.0 release of GMT.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can see a preview of the figure directly in the [Jupyter notebook](http://jupyter.org) using `fig.show()`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To open a PDF preview of the figure using your default PDF viewer use:\n",
    "\n",
    "```python\n",
    "fig.show(external=True)\n",
    "```\n",
    "\n",
    "This is useful when using the Python shell or IPython terminal app. \n",
    "However, **this command will not interrupt your Python process**. \n",
    "So using it in a Python script will not work because the script will finish and delete the generated previews.\n",
    "Use `fig.savefig` to save the figure to a file instead (see below)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Aliases\n",
    "\n",
    "GMT/Python defines long-form aliases for the command-line options to make the code more Pythonic and readble. The docstrings of the functions and methods list the possible aliases:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "help(fig.pscoast)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some options also accept values other than strings. For example, `R` (or `region`) can be passed as a list. This makes it easier to generate such arguments programatically.\n",
    "\n",
    "We can recreate the figure above using the aliases instead:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Create a new figure\n",
    "fig_alias = gmt.Figure()\n",
    "fig_alias.pscoast(\n",
    "    region=[-90, -70, 0, 20], projection='M6i', shorelines=True,\n",
    "    land='chocolate', water='skyblue', frame='afg')\n",
    "fig_alias.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving the figure\n",
    "\n",
    "Unlike the GMT command-line interface, **no figure file was generated until you ask for one**.\n",
    "\n",
    "You can call `fig.psconvert` to save the figure to a file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Format 'f' means a PDF\n",
    "fig.psconvert(prefix='first-steps-central-america', fmt='f')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "or use the matplotlib-like method `fig.savefig`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig.savefig('first-steps-central-america.png')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot point data\n",
    "\n",
    "We can use `gmt.Figure.psxy` to plot data on our map.\n",
    "\n",
    "Lets create some data to plot using numpy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# See the random number generator so we always \n",
    "# get the same numbers\n",
    "np.random.seed(42)\n",
    "\n",
    "lon = np.random.uniform(150, 240, 30)\n",
    "lat = np.random.uniform(-30, 60, 30)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save the data to a file in 2 columns:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "np.savetxt('first-steps-data.txt', np.transpose([lon, lat]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can plot the data using `Figure.psxy` and passing the file name as the `data` argument:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig_globe = gmt.Figure()\n",
    "fig_globe.pscoast(\n",
    "    region='g', projection='G200/30/6i', frame='ag', \n",
    "    resolution='i', area_thresh=5000, land='white', \n",
    "    water='DarkTurquoise')\n",
    "fig_globe.psxy(data='first-steps-data.txt', style='s0.3c',\n",
    "               color='black')\n",
    "fig_globe.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "GMT ships some sample data that can be accessed by passing `@data_file` as the `data` argument. \n",
    "\n",
    "For example, we can plot the earthquake epicenters from the `tut_quakes.ngdc` sample dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig_quakes = gmt.Figure()\n",
    "fig_quakes.pscoast(\n",
    "    region=[130, 150, 35, 50], projection='M6i', \n",
    "    frame='afg', shorelines=True, land='gray', \n",
    "    water='lightblue')\n",
    "fig_quakes.psxy(data='@tut_quakes.ngdc', style='c0.3c', \n",
    "                color='blue', pen='faint', columns=[4, 3])\n",
    "fig_quakes.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coming soon\n",
    "\n",
    "Here are a few of the features we are working on:\n",
    "\n",
    "* Data input using numpy arrays, not just files.\n",
    "* More GMT modules (`grdcontour`, etc)."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
